(define (domain shakey)
   (:requirements :strips :typing :equality)
   (:types room box shakey)
   (:predicates (at-shakey ?s ?r)
				(at-box ?b ?r)
                (has-door ?r1 ?r2)
				(opened ?x ?y)
				(onto-box ?s)
				(on-floor ?s)
				(switched ?r))
   (:action go
       :parameters (?x - room ?y - room ?s - shakey)
       :precondition (and (not (= ?x ?y))
						  (at-shakey ?s ?x)
						  (opened ?x ?y)
						  (on-floor ?s)
					 )
       :effect (and (at-shakey ?s ?y)
                    (not (at-shakey ?s ?x))
               )
   )
   (:action push
       :parameters (?b - box ?x - room ?y - room ?s - shakey)
       :precondition (and (not (= ?x ?y))
						  (at-box ?b ?x)
                          (at-shakey ?s ?x)
						  (opened ?x ?y)
						  (on-floor ?s)
                     )
       :effect (and (at-box ?b ?y)
                    (not (at-box ?b ?x)) 
               )
   )
   (:action climb-up
       :parameters (?b - box ?s - shakey ?r - room)
       :precondition (and (at-box ?b ?r)
                          (at-shakey ?s ?r)
						  (on-floor ?s)
                     )
       :effect (and (onto-box ?s)
					(not (on-floor ?s))
			   )
   )
   (:action climb-down
       :parameters (?b - box ?s - shakey ?r - room)
       :precondition (and (at-box ?b ?r)
                          (at-shakey ?s ?r)
						  (onto-box ?s)
                     )
       :effect (and (not (onto-box ?s))
					(on-floor ?s)
			   )
   )
   (:action switch-on
       :parameters (?s - shakey ?r - room)
       :precondition (and (at-shakey ?s ?r)
						  (onto-box ?s)
					 )
       :effect (switched ?r)
   )
   (:action switch-off
       :parameters (?s - shakey ?r - room)
       :precondition (and (at-shakey ?s ?r)
						  (onto-box ?s)
						  (switched ?r)
					 )
       :effect (not (switched ?r))
   )
   (:action open
       :parameters (?s - shakey ?x - room ?y - room)
       :precondition (and (not (= ?x ?y))
						  (at-shakey ?s ?x)
						  (has-door ?x ?y)
						  (on-floor ?s)
					 )
       :effect (and (opened ?x ?y)
					(opened ?y ?x)
			   )
   )
   (:action close
       :parameters (?s - shakey ?x - room ?y - room)
       :precondition (and (not (= ?x ?y))
						  (at-shakey ?s ?x)
						  (opened ?x ?y)
						  (has-door ?x ?y)
						  (on-floor ?s)
					 )
       :effect (and (not (opened ?x ?y))
					(not (opened ?y ?x))
			   )
   )
)