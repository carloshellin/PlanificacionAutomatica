(define (domain building)
	(:requirements :typing :durative-actions :fluents :durative-actions :constraints :equality :preferences)
	(:types  lift - object 
		slowlift fastlift - lift
		person - object
		number - object
	)
	(:predicates
		(at ?n - number ?o - object)
		(next ?n1 - number ?n2 - number)
		(next2 ?n1 - number ?n2 - number)
		(previous ?n1 - number ?n2 - number)
		(previous2 ?n1 - number ?n2 - number)
		(sanitized ?l - lift)
		(boarded ?p - person ?l - lift)
		(capacity ?l - lift ?n - number)
	)
	(:functions
		(dur_move)
		(dur_board_leave)
		(total_time)
	)
	(:durative-action move_up_slow
		:parameters (?lift - slowlift ?level1 - number ?level2 - number)
		:duration (= ?duration (dur_move))
		:condition (and (at start (at ?level1 ?lift))
						(over all (next ?level1 ?level2))
				   )
		:effect (and (at start (not (at ?level1 ?lift))) 
					 (at end (at ?level2 ?lift))
					 (at end (increase (total_time) (dur_move)))
				)
	)
	(:durative-action move_up_fast
		:parameters (?lift - fastlift ?level1 - number ?level2 - number)
		:duration (= ?duration (dur_move))
		:condition (and (at start (at ?level1 ?lift))
						(over all (next2 ?level1 ?level2))
				   )
		:effect (and (at start (not (at ?level1 ?lift))) 
					 (at end (at ?level2 ?lift))
					 (at end (increase (total_time) (dur_move)))
				)
	)
	(:durative-action move_down_slow
		:parameters (?lift - slowlift ?level1 - number ?level2 - number)
		:duration (= ?duration (dur_move))
		:condition (and (at start (at ?level1 ?lift))
						(over all (previous ?level1 ?level2))
				   )
		:effect (and (at start (not (at ?level1 ?lift))) 
					 (at end (at ?level2 ?lift))
					 (at end (increase (total_time) (dur_move)))
				)
	)
	(:durative-action move_down_fast
		:parameters (?lift - fastlift ?level1 - number ?level2 - number)
		:duration (= ?duration (dur_move))
		:condition (and (at start (at ?level1 ?lift))
						(over all (previous2 ?level1 ?level2))
				   )
		:effect (and (at start (not (at ?level1 ?lift))) 
					 (at end (at ?level2 ?lift))
					 (at end (increase (total_time) (dur_move)))
				)
	)
	(:durative-action board
		:parameters (?person - person ?lift - lift ?level - number ?num1 - number ?num2 - number)
		:duration (= ?duration (dur_board_leave))
		:condition (and (at start (next ?num1 ?num2))
						(at start (capacity ?lift ?num1))
						(at start (sanitized ?lift))
						(over all (at ?level ?lift))
						(over all (at ?level ?person))
				   )
		:effect (and (at end (boarded ?person ?lift))
					 (at end (capacity ?lift ?num2))
					 (at end (not (capacity ?lift ?num1)))
					 (at end (not (sanitized ?lift)))
					 (at end (not (at ?level ?person)))
					 (at end (increase (total_time) (dur_board_leave)))
				)
	)
	(:durative-action leave
		:parameters (?person - person ?lift - lift ?level - number ?num1 - number ?num2 - number)
		:duration (= ?duration (dur_board_leave))
		:condition (and (at start (previous ?num1 ?num2)) 
						(at start (capacity ?lift ?num1))
						(over all (at ?level ?lift))
						(at start (boarded ?person ?lift))
				   )
		:effect (and (at end (not (boarded ?person ?lift)))
					 (at end (capacity ?lift ?num2))
					 (at end (not (capacity ?lift ?num1)))
					 (at end (at ?level ?person))
					 (at end (increase (total_time) (dur_board_leave)))
				)
	)
	(:action sanitize
		:parameters (?lift - lift)
		:precondition ()
		:effect (sanitized ?lift)
	)
)