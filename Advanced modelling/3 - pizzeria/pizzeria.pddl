(define (domain pizzeria)
	(:requirements :typing :durative-actions :fluents :constraints :equality :preferences)
	(:types local gasStation house dish pizza moto)
	(:predicates (kneaded ?p - pizza)
				 (has-ingredients ?p - pizza)
				 (baked ?p - pizza)
				 (cooked ?di - dish)
				 (collected ?o - (either pizza dish)  ?h - house)
				 (loaded ?m - moto ?o - (either pizza dish))
				 (at ?l - (either local house gasStation) ?m - moto)
				 (entregado ?o - (either pizza dish) ?h - house)
	)
	(:functions
		(cantidad_gasolina ?m - moto)
		(gasolina_requerida ?l1 - (either local house gasStation) ?l2 - (either local house gasStation))
		(distancia ?l1 - (either local house gasStation) ?l2 - (either local house gasStation))
		(dur_Knead)
		(dur_addTop)
		(dur_cook ?d - dish)
		(dur_bake)
		(dur_collect)
		(dur_deliver)
		(velocidad ?m - moto)
		(umbral_gasolina)
		(capacidad_moto ?m - moto)
		(carga_actual ?m - moto)
		(total_time)
		(capacidad_gasolina ?m - moto)
		(dur_refuel)
		(dur_load)
	)
	(:durative-action kneadDough
		:parameters (?p - pizza)
		:duration (= ?duration (dur_Knead))
		:condition ()
		:effect (and (at end (kneaded ?p))
					 (at end (increase (total_time) (dur_Knead)))
				)
	)
	(:durative-action addTopping
		:parameters (?p - pizza)
		:duration (= ?duration (dur_addTop))
		:condition (at start (kneaded ?p))
		:effect (and (at end (has-ingredients ?p))
					 (at end (increase (total_time) (dur_addTop)))
				)
	)
	(:durative-action bake
		:parameters (?p - pizza)
		:duration (= ?duration (dur_bake))
		:condition (and (at start (kneaded ?p))
						(at start (has-ingredients ?p))
				   )
		:effect (and (at end (baked ?p))
					 (at end (increase (total_time) (dur_bake)))
				)
	)
	(:durative-action cook
		:parameters (?d - dish)
		:duration (= ?duration (dur_cook ?d))
		:condition ()
		:effect (and (at end (cooked ?d))
					 (at end (increase (total_time) (dur_cook ?d)))
				)
	)
	(:durative-action move
		:parameters (?m - moto ?l1 - (either local house gasStation) ?l2 - (either local house gasStation))
		:duration (= ?duration (/ (distancia ?l1 ?l2) (velocidad ?m)))
		:condition (and (over all (not (= ?l1 ?l2))) 
						(at start (at ?l1 ?m))
						(at start (>= (cantidad_gasolina ?m) (gasolina_requerida ?l1 ?l2)))
                   )
		:effect (and (at end (at ?l2 ?m))
					 (at start (not (at ?l1 ?m)))
					 (at end (increase (total_time) (/ (distancia ?l1 ?l2) (velocidad ?m))))
					 (at end (decrease (cantidad_gasolina ?m) (gasolina_requerida ?l1 ?l2)))
				)
	)
	(:durative-action load_pizza
		:parameters (?m - moto ?l - local ?o - pizza)
		:duration (= ?duration (dur_load))
		:condition (and (over all (at ?l ?m))
						(over all (baked ?o))
						(at start (< (carga_actual ?m) (capacidad_moto ?m)))
					  )
		:effect (and (at end (loaded ?m ?o))
					 (at end (increase (carga_actual ?m) 1))
					 (at end (increase (total_time) (dur_load)))
				)
	)
	(:durative-action load_dish
		:parameters (?m - moto ?l - local ?o - dish)
		:duration (= ?duration (dur_load))
		:condition (and (over all (at ?l ?m))
						(over all (cooked ?o))
						(at start (< (carga_actual ?m) (capacidad_moto ?m)))
					  )
		:effect (and (at end (loaded ?m ?o))
					 (at end (increase (carga_actual ?m) 1))
					 (at end (increase (total_time) (dur_load)))
				)
	)
	(:durative-action collectOrder
		:parameters (?m - moto ?h - house ?o - (either pizza dish))
		:duration (= ?duration (dur_collect))
		:condition (and (over all (at ?h ?m))
						(at start (loaded ?m ?o))
					  )
		:effect (and (at end (collected ?o ?h))
					 (at end (increase (total_time) (dur_collect)))
				)
	)
	(:durative-action deliverOrder
		:parameters (?m - moto ?h - house ?o - (either pizza dish))
		:duration (= ?duration (dur_deliver))
		:condition (and (over all (at ?h ?m))
                        (at start (collected ?o ?h))
						(at start (loaded ?m ?o))
                      )
		:effect (and (at end (entregado ?o ?h))
					 (at end (not (loaded ?m ?o)))
					 (at end (decrease (carga_actual ?m) 1))
					 (at end (increase (total_time) (dur_deliver)))
				)
	)
	(:durative-action refuel
		:parameters (?m - moto ?g - gasStation)
		:duration (= ?duration (dur_refuel))
		:condition (and (at start (> (umbral_gasolina) (cantidad_gasolina ?m)))
						   (over all (at ?g ?m))
					  )
		:effect (and (at end (assign (cantidad_gasolina ?m) (capacidad_gasolina ?m)))
					 (at end (increase (total_time) (dur_refuel)))
				)
	)
)